0000                             ; fifo_out_bytes
0000                             ; 
0000                             ; Write up to 255 bytes to the FIFO terminating when the
0000                             ; FIFO signals FULL and returns the actual number written.
0000                             ; 
0000                             ; Entry
0000                             ;  max      IX+127/6 Param 2: MAX bytes to write
0000                             ;  @tx      IX+125/4 Param 1: pointer to first byte
0000                             ;  ret addr IX+123/2
0000                             ;  old IX   IX+121/0
0000                             ;  vec ptr  IX+119/8
0000                             ;  f        IX+117/6 local var init to 0 used to return result
0000   DD 66 7D               LD   h,(ix+125)   ; HL points to TX buffer
0003   DD 6E 7C               LD   l,(ix+124)   
0006   11 00 00               LD   de,00000   ; e = sent byte count
0009   01 81 FD               LD   bc,0xfd81   
000C   DD 7E 7F               LD   a,(ix+127)   ; get high byte of count
000F   E6 FF                  AND   0xFF   ; check if non-zero
0011   28 08                  JR   z,next   ; get low byte if zero
0013   17                     RLA      ; check sign bit
0014   38 1C                  JR   c,end   ; exit if sign bit is set
0016   16 FF                  LD   d,255   ; else, +ve, non-zero hi byte so set size to 255 max
0018   5A                     LD   e,d   
0019   18 09                  JR   top   
001B                NEXT:        
001B   DD 7E 7E               LD   a,(ix+126)   ; Max bytes (1..255)
001E   E6 FF                  AND   0xff   ; check for zero and exit early
0020   28 10                  JR   Z,end   
0022   57                     LD   d,a   ; d = max bytes
0023   5F                     LD   e,a   ; e = max bytes
0024                TOP:         
0024   ED 78                  IN   a,(c)   ; get DIR status flag
0026   E6 02                  AND   0x2   
0028   28 08                  JR   z,end   ; go to end if no data available
002A   0D                     DEC   c   ; point to data reg
002B   04                     INC   b   ; pre-incr b
002C   ED A3                  OUTI      ; b--, OUT(bc) <- hl, hl++
002E   0C                     INC   c   ; point to status reg for next check
002F   1D                     DEC   e   
0030   20 F2                  JR   nz,top   ; if not loop again
0032                END:         
0032   7A                     LD   a,d   ; get max count
0033   93                     SUB   e   ; subtract current count
0034   DD 77 74               LD   (ix+116),a   ; write bytes rcvd ready to exit
