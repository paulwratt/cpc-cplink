                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.7.0 #10231 (Mac OS X x86_64)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _fifo_out_byte
                             13 	.globl _fifo_in_byte
                             14 	.globl _fifo_reset
                             15 	.globl _scr_set_mode
                             16 	.globl _km_wait_char
                             17 	.globl _printf
                             18 	.globl _send_command_to_pi
                             19 	.globl _read_response_from_pi
                             20 ;--------------------------------------------------------
                             21 ; special function registers
                             22 ;--------------------------------------------------------
                             23 ;--------------------------------------------------------
                             24 ; ram data
                             25 ;--------------------------------------------------------
                             26 	.area _DATA
                             27 ;--------------------------------------------------------
                             28 ; ram data
                             29 ;--------------------------------------------------------
                             30 	.area _INITIALIZED
                             31 ;--------------------------------------------------------
                             32 ; absolute external ram data
                             33 ;--------------------------------------------------------
                             34 	.area _DABS (ABS)
                             35 ;--------------------------------------------------------
                             36 ; global & static initialisations
                             37 ;--------------------------------------------------------
                             38 	.area _HOME
                             39 	.area _GSINIT
                             40 	.area _GSFINAL
                             41 	.area _GSINIT
                             42 ;--------------------------------------------------------
                             43 ; Home
                             44 ;--------------------------------------------------------
                             45 	.area _HOME
                             46 	.area _HOME
                             47 ;--------------------------------------------------------
                             48 ; code
                             49 ;--------------------------------------------------------
                             50 	.area _CODE
                             51 ;src/main.c:31: void main ( void ) 
                             52 ;	---------------------------------
                             53 ; Function main
                             54 ; ---------------------------------
   0000                      55 _main::
   0000 DD E5         [15]   56 	push	ix
   0002 DD 21 00 00   [14]   57 	ld	ix,#0
   0006 DD 39         [15]   58 	add	ix,sp
   0008 21 E2 FF      [10]   59 	ld	hl, #-30
   000B 39            [11]   60 	add	hl, sp
   000C F9            [ 6]   61 	ld	sp, hl
                             62 ;src/main.c:33: uint8_t *command = "PING\n";
                             63 ;src/main.c:38: for(uint8_t index = 0; index < RESPONSE_LENGTH; index++)
   000D 21 00 00      [10]   64 	ld	hl, #0x0000
   0010 39            [11]   65 	add	hl, sp
   0011 EB            [ 4]   66 	ex	de, hl
   0012 0E 00         [ 7]   67 	ld	c, #0x00
   0014                      68 00103$:
   0014 79            [ 4]   69 	ld	a, c
   0015 D6 1E         [ 7]   70 	sub	a, #0x1e
   0017 30 09         [12]   71 	jr	NC,00101$
                             72 ;src/main.c:40: response[index] = 0;
   0019 69            [ 4]   73 	ld	l, c
   001A 26 00         [ 7]   74 	ld	h, #0x00
   001C 19            [11]   75 	add	hl, de
   001D 36 00         [10]   76 	ld	(hl), #0x00
                             77 ;src/main.c:38: for(uint8_t index = 0; index < RESPONSE_LENGTH; index++)
   001F 0C            [ 4]   78 	inc	c
   0020 18 F2         [12]   79 	jr	00103$
   0022                      80 00101$:
                             81 ;src/main.c:44: scr_set_mode(2);
   0022 D5            [11]   82 	push	de
   0023 21 02 00      [10]   83 	ld	hl, #0x0002
   0026 CDr00r00      [17]   84 	call	_scr_set_mode
   0029 CDr00r00      [17]   85 	call	_fifo_reset
   002C 21r60r00      [10]   86 	ld	hl, #___str_0
   002F E5            [11]   87 	push	hl
   0030 CDr87r00      [17]   88 	call	_send_command_to_pi
   0033 21r60r00      [10]   89 	ld	hl, #___str_0
   0036 E3            [19]   90 	ex	(sp),hl
   0037 21r66r00      [10]   91 	ld	hl, #___str_1
   003A E5            [11]   92 	push	hl
   003B CDr00r00      [17]   93 	call	_printf
   003E F1            [10]   94 	pop	af
   003F F1            [10]   95 	pop	af
   0040 D1            [10]   96 	pop	de
                             97 ;src/main.c:56: read_response_from_pi(response);
   0041 4B            [ 4]   98 	ld	c, e
   0042 42            [ 4]   99 	ld	b, d
   0043 D5            [11]  100 	push	de
   0044 C5            [11]  101 	push	bc
   0045 CDrBBr00      [17]  102 	call	_read_response_from_pi
   0048 21r6Br00      [10]  103 	ld	hl, #___str_2
   004B E3            [19]  104 	ex	(sp),hl
   004C CDr00r00      [17]  105 	call	_printf
   004F F1            [10]  106 	pop	af
                            107 ;src/main.c:61: printf("Press any key to exit\r");
   0050 21r70r00      [10]  108 	ld	hl, #___str_3
   0053 E3            [19]  109 	ex	(sp),hl
   0054 CDr00r00      [17]  110 	call	_printf
   0057 F1            [10]  111 	pop	af
                            112 ;src/main.c:62: km_wait_char();
   0058 CDr00r00      [17]  113 	call	_km_wait_char
                            114 ;src/main.c:63: }
   005B DD F9         [10]  115 	ld	sp, ix
   005D DD E1         [14]  116 	pop	ix
   005F C9            [10]  117 	ret
   0060                     118 ___str_0:
   0060 50 49 4E 47         119 	.ascii "PING"
   0064 0A                  120 	.db 0x0a
   0065 00                  121 	.db 0x00
   0066                     122 ___str_1:
   0066 0D                  123 	.db 0x0d
   0067 25 73               124 	.ascii "%s"
   0069 0D                  125 	.db 0x0d
   006A 00                  126 	.db 0x00
   006B                     127 ___str_2:
   006B 25 73               128 	.ascii "%s"
   006D 0D                  129 	.db 0x0d
   006E 0D                  130 	.db 0x0d
   006F 00                  131 	.db 0x00
   0070                     132 ___str_3:
   0070 50 72 65 73 73 20   133 	.ascii "Press any key to exit"
        61 6E 79 20 6B 65
        79 20 74 6F 20 65
        78 69 74
   0085 0D                  134 	.db 0x0d
   0086 00                  135 	.db 0x00
                            136 ;src/main.c:65: void send_command_to_pi(uint8_t *command)
                            137 ;	---------------------------------
                            138 ; Function send_command_to_pi
                            139 ; ---------------------------------
   0087                     140 _send_command_to_pi::
                            141 ;src/main.c:70: while(command[counter] != 0)
   0087 0E 00         [ 7]  142 	ld	c, #0x00
   0089                     143 00101$:
   0089 21 02 00      [10]  144 	ld	hl, #2
   008C 39            [11]  145 	add	hl, sp
   008D 7E            [ 7]  146 	ld	a, (hl)
   008E 23            [ 6]  147 	inc	hl
   008F 66            [ 7]  148 	ld	h, (hl)
   0090 6F            [ 4]  149 	ld	l, a
   0091 06 00         [ 7]  150 	ld	b, #0x00
   0093 09            [11]  151 	add	hl, bc
   0094 7E            [ 7]  152 	ld	a, (hl)
   0095 B7            [ 4]  153 	or	a, a
   0096 28 03         [12]  154 	jr	Z,00114$
                            155 ;src/main.c:72: counter++;
   0098 0C            [ 4]  156 	inc	c
   0099 18 EE         [12]  157 	jr	00101$
   009B                     158 00114$:
                            159 ;src/main.c:76: for(uint8_t index = 0; index < counter; index++)
   009B 06 00         [ 7]  160 	ld	b, #0x00
   009D                     161 00106$:
   009D 78            [ 4]  162 	ld	a, b
   009E 91            [ 4]  163 	sub	a, c
   009F D0            [11]  164 	ret	NC
                            165 ;src/main.c:78: fifo_out_byte(command[ index ]);
   00A0 FD 21 02 00   [14]  166 	ld	iy, #2
   00A4 FD 39         [15]  167 	add	iy, sp
   00A6 FD 7E 00      [19]  168 	ld	a, 0 (iy)
   00A9 80            [ 4]  169 	add	a, b
   00AA 5F            [ 4]  170 	ld	e, a
   00AB FD 7E 01      [19]  171 	ld	a, 1 (iy)
   00AE CE 00         [ 7]  172 	adc	a, #0x00
   00B0 57            [ 4]  173 	ld	d, a
   00B1 1A            [ 7]  174 	ld	a, (de)
   00B2 6F            [ 4]  175 	ld	l, a
   00B3 C5            [11]  176 	push	bc
   00B4 CDr00r00      [17]  177 	call	_fifo_out_byte
   00B7 C1            [10]  178 	pop	bc
                            179 ;src/main.c:76: for(uint8_t index = 0; index < counter; index++)
   00B8 04            [ 4]  180 	inc	b
                            181 ;src/main.c:80: }
   00B9 18 E2         [12]  182 	jr	00106$
                            183 ;src/main.c:82: void read_response_from_pi(uint8_t *response)
                            184 ;	---------------------------------
                            185 ; Function read_response_from_pi
                            186 ; ---------------------------------
   00BB                     187 _read_response_from_pi::
   00BB DD E5         [15]  188 	push	ix
   00BD DD 21 00 00   [14]  189 	ld	ix,#0
   00C1 DD 39         [15]  190 	add	ix,sp
                            191 ;src/main.c:85: uint8_t did_we_get_byte = 0;
                            192 ;src/main.c:87: while((receive_byte_index == 0) || ((receive_byte_index > 0) && (response[receive_byte_index - 1] != '\n')))
   00C3 01 00 00      [10]  193 	ld	bc, #0x0000
   00C6                     194 00106$:
   00C6 79            [ 4]  195 	ld	a, c
   00C7 B7            [ 4]  196 	or	a, a
   00C8 28 14         [12]  197 	jr	Z,00101$
   00CA 79            [ 4]  198 	ld	a, c
   00CB B7            [ 4]  199 	or	a, a
   00CC 28 2A         [12]  200 	jr	Z,00109$
   00CE 59            [ 4]  201 	ld	e, c
   00CF 16 00         [ 7]  202 	ld	d, #0x00
   00D1 1B            [ 6]  203 	dec	de
   00D2 DD 6E 04      [19]  204 	ld	l, 4 (ix)
   00D5 DD 66 05      [19]  205 	ld	h, 5 (ix)
   00D8 19            [11]  206 	add	hl, de
   00D9 7E            [ 7]  207 	ld	a, (hl)
   00DA D6 0A         [ 7]  208 	sub	a, #0x0a
   00DC 28 1A         [12]  209 	jr	Z,00109$
                            210 ;src/main.c:89: while(did_we_get_byte == 0)
   00DE                     211 00101$:
   00DE 78            [ 4]  212 	ld	a, b
   00DF B7            [ 4]  213 	or	a, a
   00E0 20 11         [12]  214 	jr	NZ,00103$
                            215 ;src/main.c:92: did_we_get_byte = fifo_in_byte(&response[receive_byte_index]);
   00E2 DD 6E 04      [19]  216 	ld	l, 4 (ix)
   00E5 DD 66 05      [19]  217 	ld	h, 5 (ix)
   00E8 06 00         [ 7]  218 	ld	b, #0x00
   00EA 09            [11]  219 	add	hl, bc
   00EB C5            [11]  220 	push	bc
   00EC CDr00r00      [17]  221 	call	_fifo_in_byte
   00EF C1            [10]  222 	pop	bc
   00F0 45            [ 4]  223 	ld	b, l
   00F1 18 EB         [12]  224 	jr	00101$
   00F3                     225 00103$:
                            226 ;src/main.c:97: did_we_get_byte = 0;
   00F3 06 00         [ 7]  227 	ld	b, #0x00
                            228 ;src/main.c:100: receive_byte_index++;
   00F5 0C            [ 4]  229 	inc	c
   00F6 18 CE         [12]  230 	jr	00106$
   00F8                     231 00109$:
                            232 ;src/main.c:103: }
   00F8 DD E1         [14]  233 	pop	ix
   00FA C9            [10]  234 	ret
                            235 	.area _CODE
                            236 	.area _INITIALIZER
                            237 	.area _CABS (ABS)
